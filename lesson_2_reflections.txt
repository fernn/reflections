Question 1:
	What happens when you initialize a repository? Why do you need to do
	it?

Reflections:
	Initializing a repository creates a .git file. It is needed to create
	this file which will hold the metadata about any commits that will
	be made later.

Question 2:
	How is the staging area different from the working directory and
	the repository? What value do you think it offers?

Reflections:
	Staging area indicates which files are ready to be committed to the
	repository. Advantage is that it allows for a committing all files
	in the staging area at the same time.

Question 3:
	How can you use the staging area to make sure you have one commit
	per logical change?

Reflections:
	By adding and commiting logical changes one by one seperately.

Question 4:
	What are some situations when branches would be helpful in keeping
	your history organized? How would branches help?

Reflections:
	Branches help in experimenting with your code. It helps to try out
	new ideas without affecting the original working code. It is helpful in case of bigger projects as separate teams can work on
	different ideas by making separate branches and later merging the
	tested ideas and features.

Question 5:
	How do the diagrams help you visualize the branch structure?

Reflections:
	Diagrams are helpful in visualising branches of commits in a tree
	form. It is easier to identify the position of a commit in a graph.
	use this command $ git log --graph --oneline <branch_name> master

Question 6:
	What is the result of merging two branches together? Why do we
	represent it in the diagram the way we do?

Reflections:
	Merging two branches results in a new commit that contains the
	common code along with any additions in any files. The deletions
	are not included. Command used is $git merge master <branch_name>.
	In the diagram a new merged commit is created which has parents from
	both the merged branches. The label of one of the branches is
	removed by using the command $ git branch -d <branch_name>

